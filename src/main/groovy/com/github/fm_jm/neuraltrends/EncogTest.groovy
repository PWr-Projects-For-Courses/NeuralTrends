package com.github.fm_jm.neuraltrends

import com.github.fm_jm.neuraltrends.autoencoders.ThresholdCategory
import org.encog.Encog
import org.encog.engine.network.activation.ActivationSigmoid
import org.encog.ml.data.MLData
import org.encog.ml.data.MLDataPair
import org.encog.ml.data.MLDataSet
import org.encog.ml.data.basic.BasicMLDataSet
import org.encog.neural.networks.BasicNetwork
import org.encog.neural.networks.layers.BasicLayer
import org.encog.neural.networks.training.propagation.resilient.ResilientPropagation


BasicNetwork network = new BasicNetwork();
network.addLayer(new BasicLayer(null,false,6));
network.addLayer(new BasicLayer(new ActivationSigmoid(),true,10));
network.addLayer(new BasicLayer(new ActivationSigmoid(),true,6));
network.getStructure().finalizeStructure();
network.reset();

double[][] data = [
    [1, 1, 1, 0, 0, 0],
    [0, 1, 1, 0, 0, 0],
    [1, 0, 1, 0, 0, 0],
    [1, 1, 0, 0, 0, 0],
    [1, 1, 1, 1, 0, 0],
    [1, 1, 1, 0, 1, 0],
    [1, 1, 1, 0, 0, 1]
]

// create training data
MLDataSet trainingSet = new BasicMLDataSet(data, data);

// train the neural network
final ResilientPropagation train = new ResilientPropagation(network, trainingSet);

20.times {
    train.iteration();
    println("Epoch #" + it+ " Error:" + train.getError());

}
train.finishTraining();

// test the neural network
System.out.println("Neural Network Results:");
for(MLDataPair pair: trainingSet ) {
    final MLData output = network.compute(pair.getInput());
    println "in: ${ThresholdCategory.threshold(pair.inputArray)}, expected: ${ThresholdCategory.threshold(pair.idealArray)}, is: ${ThresholdCategory.threshold(output.data)}"
}

println network.flat.getWeights()
def newWeights = network.flat.getWeights().toList()
newWeights[0] *= 3
network.flat.setWeights((double[])newWeights.toArray())
println network.flat.getWeights()

System.out.println("Neural Network Results after weight modification:");
for(MLDataPair pair: trainingSet ) {
    final MLData output = network.compute(pair.getInput());
    println "in: ${ThresholdCategory.threshold(pair.inputArray)}, expected: ${ThresholdCategory.threshold(pair.idealArray)}, is: ${ThresholdCategory.threshold(output.data)}"
}

Encog.getInstance().shutdown();

/*
Example stdout:

Epoch #0 Error:0.27014307672591964
Epoch #1 Error:0.21891650209332233
Epoch #2 Error:0.16695772830958763
Epoch #3 Error:0.12456032787428864
Epoch #4 Error:0.10857221250012601
Epoch #5 Error:0.09874184233278806
Epoch #6 Error:0.08895894878232963
Epoch #7 Error:0.07385365617010901
Epoch #8 Error:0.061513646250437856
Epoch #9 Error:0.04982518378383795
Epoch #10 Error:0.03988270524104592
Epoch #11 Error:0.03048501175785403
Epoch #12 Error:0.023972990175461093
Epoch #13 Error:0.01866092546211487
Epoch #14 Error:0.012039066111680244
Epoch #15 Error:0.006404203798341173
Epoch #16 Error:0.003148973409096483
Epoch #17 Error:0.0015197344831569177
Epoch #18 Error:0.0017626125275259313
Epoch #19 Error:8.06255660086911E-4
Neural Network Results:
in: [1, 1, 1, 0, 0, 0], expected: [1, 1, 1, 0, 0, 0], is: [1, 1, 1, 0, 0, 0]
in: [0, 1, 1, 0, 0, 0], expected: [0, 1, 1, 0, 0, 0], is: [0, 1, 1, 0, 0, 0]
in: [1, 0, 1, 0, 0, 0], expected: [1, 0, 1, 0, 0, 0], is: [1, 0, 1, 0, 0, 0]
in: [1, 1, 0, 0, 0, 0], expected: [1, 1, 0, 0, 0, 0], is: [1, 1, 0, 0, 0, 0]
in: [1, 1, 1, 1, 0, 0], expected: [1, 1, 1, 1, 0, 0], is: [1, 1, 1, 1, 0, 0]
in: [1, 1, 1, 0, 1, 0], expected: [1, 1, 1, 0, 1, 0], is: [1, 1, 1, 0, 1, 0]
in: [1, 1, 1, 0, 0, 1], expected: [1, 1, 1, 0, 0, 1], is: [1, 1, 1, 0, 0, 1]
[-0.640750621115378, 4.9603735651029295, 0.28055896248226103, 1.0894989054817292, -2.93794813623193, -0.103311252225116, 0.7705400861834201, -0.30836068292227103, 2.5907084694967906, -0.9045885477955355, -0.06923197114322258, 0.48724981326700456, 0.5105094357893314, 1.4977087044190052, -18.769095397838107, 0.3011232993623732, 1.656362438353831, 7.159455802096643, 0.6489463906486075, -0.7042640932722392, 1.4223211576071864, 0.9245071636284448, -0.8966343891798667, -1.3941212023610785, 0.3259193419873924, 10.232431226821554, -1.071006633914399, 8.44340018539873, 0.8962600768191838, 0.5514458979550444, -0.9697502346638266, 0.8756878807987583, -0.7324435370564706, -17.54085134969502, -3.4256704382884657, 2.1342168681826723, -6.215200589140316, -19.167049588270547, -3.1149244947230756, 2.217629655737322, 3.635152168532323, 0.7744081848348328, 1.983288394622976, -0.09979234619459654, 0.08752589840454665, -1.0417308270879064, -0.43945528037955983, -17.663546191266764, -1.5872777028250633, 4.099938853102523, -1.7781862932832273, 0.1478378573743823, -1.1456221769612682, -7.50924583981317, 0.6704088710939192, -1.2031790321426845, 1.6094805092636992, -0.1783507462105478, 5.2946827779978, 0.7316774379635282, 0.4104472915423649, 0.1777051317823145, -18.899678464278786, -12.460973352391049, 6.794175393714206, -0.3144040878364779, 0.5659381088920912, 1.8792340995309997, 0.26693407032255057, -19.192488822950207, 0.4584647098620743, -12.329246486983866, 4.162376920450872, 0.8896809940138601, -3.2500010372186567, -1.2012718207963418, 0.3925982819073692, 18.394817581697097, 0.19849787659828932, 1.05082083161646, 0.14014002842658746, 19.61139200336258, -0.3108574136515064, 1.6605058431522361, -1.5740845774970242, -18.916193819238206, 2.08984342041464, 2.2883221495114308, -7.1235809500534195, 2.951581600073375, -1.0431208201720668, 2.2591237338345396, -0.22030262702382564, -19.036368121288465, -2.583763645483123, 0.07134616538404659, -0.7730683671846461, -1.1263260365742238, 2.5172736592846547, -0.3186937488951739, 18.90872114131055, 1.2009718846584003, -0.4079746038358934, 0.21046207827338478, -0.40971098540588974, 19.1127079857664, -0.7260775545123861, 0.9889382127997293, -0.3048753670532964, -0.20373452500429642, 1.038510210396853, 19.54436926197226, 5.908490051956429, -19.028397781929844, 4.208691914494078, -2.150714753243883, -0.31851485688053044, 2.003590286882725, -3.8036640014930847, -5.777198470963782, -1.731694189073415, 0.2811038025894533, 1.6893755695419532, 6.546273075460291, -7.136684438243996, 9.728022511073044]
[-1.9222518633461338, 4.9603735651029295, 0.28055896248226103, 1.0894989054817292, -2.93794813623193, -0.103311252225116, 0.7705400861834201, -0.30836068292227103, 2.5907084694967906, -0.9045885477955355, -0.06923197114322258, 0.48724981326700456, 0.5105094357893314, 1.4977087044190052, -18.769095397838107, 0.3011232993623732, 1.656362438353831, 7.159455802096643, 0.6489463906486075, -0.7042640932722392, 1.4223211576071864, 0.9245071636284448, -0.8966343891798667, -1.3941212023610785, 0.3259193419873924, 10.232431226821554, -1.071006633914399, 8.44340018539873, 0.8962600768191838, 0.5514458979550444, -0.9697502346638266, 0.8756878807987583, -0.7324435370564706, -17.54085134969502, -3.4256704382884657, 2.1342168681826723, -6.215200589140316, -19.167049588270547, -3.1149244947230756, 2.217629655737322, 3.635152168532323, 0.7744081848348328, 1.983288394622976, -0.09979234619459654, 0.08752589840454665, -1.0417308270879064, -0.43945528037955983, -17.663546191266764, -1.5872777028250633, 4.099938853102523, -1.7781862932832273, 0.1478378573743823, -1.1456221769612682, -7.50924583981317, 0.6704088710939192, -1.2031790321426845, 1.6094805092636992, -0.1783507462105478, 5.2946827779978, 0.7316774379635282, 0.4104472915423649, 0.1777051317823145, -18.899678464278786, -12.460973352391049, 6.794175393714206, -0.3144040878364779, 0.5659381088920912, 1.8792340995309997, 0.26693407032255057, -19.192488822950207, 0.4584647098620743, -12.329246486983866, 4.162376920450872, 0.8896809940138601, -3.2500010372186567, -1.2012718207963418, 0.3925982819073692, 18.394817581697097, 0.19849787659828932, 1.05082083161646, 0.14014002842658746, 19.61139200336258, -0.3108574136515064, 1.6605058431522361, -1.5740845774970242, -18.916193819238206, 2.08984342041464, 2.2883221495114308, -7.1235809500534195, 2.951581600073375, -1.0431208201720668, 2.2591237338345396, -0.22030262702382564, -19.036368121288465, -2.583763645483123, 0.07134616538404659, -0.7730683671846461, -1.1263260365742238, 2.5172736592846547, -0.3186937488951739, 18.90872114131055, 1.2009718846584003, -0.4079746038358934, 0.21046207827338478, -0.40971098540588974, 19.1127079857664, -0.7260775545123861, 0.9889382127997293, -0.3048753670532964, -0.20373452500429642, 1.038510210396853, 19.54436926197226, 5.908490051956429, -19.028397781929844, 4.208691914494078, -2.150714753243883, -0.31851485688053044, 2.003590286882725, -3.8036640014930847, -5.777198470963782, -1.731694189073415, 0.2811038025894533, 1.6893755695419532, 6.546273075460291, -7.136684438243996, 9.728022511073044]
Neural Network Results after weight modification:
in: [1, 1, 1, 0, 0, 0], expected: [1, 1, 1, 0, 0, 0], is: [1, 1, 1, 0, 0, 0]
in: [0, 1, 1, 0, 0, 0], expected: [0, 1, 1, 0, 0, 0], is: [0, 1, 1, 0, 0, 0]
in: [1, 0, 1, 0, 0, 0], expected: [1, 0, 1, 0, 0, 0], is: [1, 0, 1, 0, 0, 0]
in: [1, 1, 0, 0, 0, 0], expected: [1, 1, 0, 0, 0, 0], is: [1, 1, 0, 0, 0, 0]
in: [1, 1, 1, 1, 0, 0], expected: [1, 1, 1, 1, 0, 0], is: [1, 1, 1, 1, 0, 0]
in: [1, 1, 1, 0, 1, 0], expected: [1, 1, 1, 0, 1, 0], is: [1, 1, 1, 0, 1, 0]
in: [1, 1, 1, 0, 0, 1], expected: [1, 1, 1, 0, 0, 1], is: [1, 1, 1, 0, 0, 1]
* */